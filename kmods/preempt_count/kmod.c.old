#include <linux/init.h>
#include <linux/module.h>
#include <linux/sched/signal.h>
#include <linux/kern_levels.h>
#include <asm/preempt.h>
#include <linux/preempt.h>

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Ricardo Robaina <rrobaina@redhat.com>");
MODULE_DESCRIPTION("Reproducer preempt_count");
MODULE_VERSION("1.0");

#define INC_MAX 2
#define DEC_MAX 2

int load_func(void)
{
	int i = 0;

	/*	
	while(i < INC_MAX){
		printk(KERN_ERR "KMOD: preempt_count: 0x%08x\n", preempt_count());
		__preempt_count_add(SOFTIRQ_OFFSET);
		i++;
	}
	printk(KERN_ERR "KMOD: preempt_count: 0x%08x\n", preempt_count());
	
	i = 0;
	*/
	while(i < DEC_MAX){
		printk(KERN_ERR "KMOD: preempt_count: 0x%08x\n", preempt_count());
		__preempt_count_sub(SOFTIRQ_OFFSET);
		i++;
	}
	printk(KERN_ERR "KMOD: preempt_count: 0x%08x\n", preempt_count());

	return 0;
}

void unload_func(void)
{

}

module_init(load_func);
module_exit(unload_func);
